{"ast":null,"code":"var _jsxFileName = \"/home/phuong/Documents/FE-Practice/reactjs-cinema/src/pages/CreatePageV3.js\";\nimport React from 'react';\nimport { Form, Row, Col, Button, Badge, Modal } from 'react-bootstrap';\n\nclass CreatePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getInitialState = (isInit = true) => {\n      let newState = {\n        flags: {}\n      };\n      ['movies', 'errors'].forEach(eachState => {\n        newState[eachState] = {};\n        this.props.items.map(item => {\n          newState[eachState][item] = '';\n        });\n      });\n\n      if (isInit) {\n        this.state = newState;\n      } else {\n        this.setState(newState);\n      }\n    };\n\n    this.setKeyValue = (key, errorValue, movieValue) => {\n      let preErrors = { ...this.state.errors\n      };\n      let preMovies = { ...this.state.movies\n      };\n      preErrors[key] = errorValue;\n      preMovies[key] = movieValue;\n      let isShowSubmitButton = false;\n\n      if (key === 'name' && movieValue.length !== 0 || this.state.movies['name'].length !== 0) {\n        isShowSubmitButton = true;\n      }\n\n      this.setState({ ...this.state,\n        movies: preMovies,\n        errors: preErrors,\n        flags: { ...this.state.flags,\n          isShowSubmitButton: isShowSubmitButton\n        }\n      });\n    };\n\n    this.movieNameValidation = movieName => {\n      let errorStr = 'Movie name must NOT be empty';\n      let name = movieName.trim();\n\n      if (name.length) {\n        errorStr = '';\n      } else {\n        name = '';\n      }\n\n      return [errorStr, name];\n    };\n\n    this.movieRatingValidation = movieRating => {\n      let errorStr = 'Movie rating must be a NUMBER';\n      let ratingNumber = parseFloat(movieRating);\n\n      if (!ratingNumber) {\n        ratingNumber = 0.0;\n      } else {\n        errorStr = '';\n      }\n\n      return [errorStr, ratingNumber];\n    };\n\n    this.movieTimeValidation = movieTime => {\n      const timePattern = /^\\d{1,2}:\\d{2}[,\\d{1,2}:\\d{2}]*?$/;\n      let errorStr = 'Movie time must be a string PATTERN hh:mm or hh:mm,hh:mm';\n      let timeArray = movieTime.trim();\n\n      if (timePattern.test(timeArray)) {\n        errorStr = '';\n        timeArray = timeArray.split(',');\n      } else {\n        timeArray = [];\n      }\n\n      return [errorStr, timeArray];\n    };\n\n    this.movieValidation = (name, value) => {\n      let [errorStr, returnValue] = '';\n\n      switch (name) {\n        case 'name':\n          [errorStr, returnValue] = this.movieNameValidation(value);\n          break;\n\n        case 'rating':\n          [errorStr, returnValue] = this.movieRatingValidation(value);\n          break;\n\n        case 'time':\n          [errorStr, returnValue] = this.movieTimeValidation(value);\n          break;\n\n        default:\n          break;\n      }\n\n      return [name, errorStr, returnValue];\n    };\n\n    this.handleOnChange = event => {\n      let name = event.target.name;\n      let value = event.target.value;\n      let [keyName, errorStr, keyValue] = this.movieValidation(name, value);\n      this.setKeyValue(keyName, errorStr, keyValue);\n    };\n\n    this.handleReset = () => {\n      this.getInitialState(false);\n      document.getElementById('movieCreateForm').reset();\n    };\n\n    this.isFormValid = () => {\n      this.props.items.forEach(item => {\n        if (this.state.errors[item].length !== 0) {\n          return false;\n        }\n      });\n      return true;\n    };\n\n    this.handleShowConfirmation = () => {\n      this.setState({ ...this.state,\n        flags: { ...this.state.flags,\n          isShowConfirmation: !this.state.flags.isShowConfirmation\n        }\n      });\n\n      if (this.state.flags.isCreated) {\n        this.handleReset();\n      }\n    };\n\n    this.handleSubmit = () => {\n      if (this.isFormValid) {\n        this.handleShowConfirmation();\n      } else {\n        alert('Form is not valid');\n      }\n    };\n\n    this.handleFormSubmit = () => {\n      //fetch functions\n      fetch('http://localhost:5000/movie/create', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(this.state.movies)\n      }).then(res => res.json()).then(res => this.setState({ ...this.state,\n        movies: res.data,\n        flags: { ...this.state.flags,\n          isCreated: true\n        }\n      }));\n    };\n\n    this.getInitialState();\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n  }\n\n  render() {\n    const MovieItems = this.props.items.map(item => {\n      return /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }\n      }, item[0].toUpperCase() + item.substr(1), ' '), /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        size: \"lg\",\n        placeholder: `Enter the movie ${item}`,\n        name: item,\n        onChange: this.handleOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }\n      }), this.state.errors[item] === '' ? null : /*#__PURE__*/React.createElement(Badge, {\n        variant: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }\n      }, this.state.errors[item]));\n    });\n\n    let MovieCreateConfirmation = movie => {\n      let modalTitle = 'Movie create confirmation !';\n      let movieCode = null;\n      let buttonList = /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        variant: \"secondary\",\n        onClick: this.handleShowConfirmation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 29\n        }\n      }, \"Cancel\"), ' '), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        variant: \"primary\",\n        onClick: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }\n      }, \"Confirm\"), ' '));\n\n      if (this.state.flags.isCreated) {\n        modalTitle = 'Movie is creadted sucessfully !!!';\n        movieCode = /*#__PURE__*/React.createElement(Form.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          className: \"col-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(Form.Label, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 33\n          }\n        }, \"Code\")), /*#__PURE__*/React.createElement(Col, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          value: this.state.movies._id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 33\n          }\n        }))));\n        buttonList = /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          block: true,\n          variant: \"success\",\n          onClick: this.handleShowConfirmation,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 29\n          }\n        }, \"Close\"), ' '));\n      }\n\n      return /*#__PURE__*/React.createElement(Modal, {\n        show: this.state.flags.isShowConfirmation,\n        onHide: this.handleShowConfirmation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Header, {\n        closeButton: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }\n      }, \" \", modalTitle, \" \")), /*#__PURE__*/React.createElement(Modal.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }\n      }, movieCode, this.props.items.map(item => {\n        return /*#__PURE__*/React.createElement(Form.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          className: \"col-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Form.Label, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 45\n          }\n        }, item[0].toUpperCase() + item.substr(1))), /*#__PURE__*/React.createElement(Col, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          value: this.state.movies[item],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 45\n          }\n        }))));\n      })), /*#__PURE__*/React.createElement(Modal.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        className: \"col-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 25\n        }\n      }, \" \", buttonList, \" \")));\n    };\n\n    return /*#__PURE__*/React.createElement(Form, {\n      id: \"movieCreateForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }\n    }, MovieItems, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      block: true,\n      size: \"lg\",\n      variant: \"primary\",\n      onClick: this.handleSubmit,\n      disabled: !this.state.flags.isShowSubmitButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 25\n      }\n    }, \"Submit\")), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      block: true,\n      size: \"lg\",\n      variant: \"danger\",\n      onClick: this.handleReset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 25\n      }\n    }, \"Reset\"))), MovieCreateConfirmation(this.state.movies));\n  }\n\n}\n\nexport default CreatePage;","map":{"version":3,"sources":["/home/phuong/Documents/FE-Practice/reactjs-cinema/src/pages/CreatePageV3.js"],"names":["React","Form","Row","Col","Button","Badge","Modal","CreatePage","Component","constructor","props","getInitialState","isInit","newState","flags","forEach","eachState","items","map","item","state","setState","setKeyValue","key","errorValue","movieValue","preErrors","errors","preMovies","movies","isShowSubmitButton","length","movieNameValidation","movieName","errorStr","name","trim","movieRatingValidation","movieRating","ratingNumber","parseFloat","movieTimeValidation","movieTime","timePattern","timeArray","test","split","movieValidation","value","returnValue","handleOnChange","event","target","keyName","keyValue","handleReset","document","getElementById","reset","isFormValid","handleShowConfirmation","isShowConfirmation","isCreated","handleSubmit","alert","handleFormSubmit","fetch","headers","method","body","JSON","stringify","then","res","json","data","bind","render","MovieItems","toUpperCase","substr","MovieCreateConfirmation","movie","modalTitle","movieCode","buttonList","_id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Form, Row, Col, Button, Badge, Modal} from 'react-bootstrap';\n\nclass CreatePage extends React.Component {\n    constructor(props){\n        super(props);\n        this.getInitialState();\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    }\n\n    getInitialState = (isInit=true) => {\n        let newState = {flags: {}};\n        ['movies', 'errors'].forEach((eachState)=>{\n            newState[eachState] = {};\n            this.props.items.map((item)=>{\n                newState[eachState][item] = ''\n            })\n        })\n        if (isInit){\n            this.state = newState;\n        } else {\n            this.setState(newState)\n        }\n    }\n\n    setKeyValue = (key, errorValue, movieValue) => {\n        let preErrors = {...this.state.errors};\n        let preMovies = {...this.state.movies};\n        preErrors[key] = errorValue;\n        preMovies[key] = movieValue;\n        let isShowSubmitButton = false;\n        if ((key ==='name' && movieValue.length !== 0) || this.state.movies['name'].length !== 0) {\n            isShowSubmitButton = true\n        }\n        this.setState({\n            ...this.state,\n            movies: preMovies,\n            errors: preErrors,\n            flags: {\n                ...this.state.flags,\n                isShowSubmitButton: isShowSubmitButton\n            }\n        })\n    }\n\n    movieNameValidation = (movieName) => {\n        let errorStr = 'Movie name must NOT be empty';\n        let name = movieName.trim();\n        if (name.length) {\n            errorStr = '';\n        } else {\n            name = '';\n        }\n        return [errorStr, name]\n    }\n\n    movieRatingValidation = (movieRating) => {\n        let errorStr = 'Movie rating must be a NUMBER';\n        let ratingNumber = parseFloat(movieRating);\n        if (!ratingNumber){\n            ratingNumber = 0.0;\n        } else {\n            errorStr = ''\n        }\n        return [errorStr, ratingNumber]\n    }\n\n    movieTimeValidation = (movieTime) => {\n        const timePattern = /^\\d{1,2}:\\d{2}[,\\d{1,2}:\\d{2}]*?$/;\n        let errorStr = 'Movie time must be a string PATTERN hh:mm or hh:mm,hh:mm'\n        let timeArray = movieTime.trim()\n        if (timePattern.test(timeArray)){\n            errorStr = '';\n            timeArray = timeArray.split(',');\n        } else {\n            timeArray = [];\n        }\n        return [errorStr, timeArray]\n    }\n\n    movieValidation = (name, value) => {\n        let [errorStr, returnValue] = '';\n        switch (name) {\n            case 'name':\n                [errorStr, returnValue] = this.movieNameValidation(value);\n                break;\n            case 'rating':\n                [errorStr, returnValue] = this.movieRatingValidation(value);\n                break;\n            case 'time':\n                [errorStr, returnValue] = this.movieTimeValidation(value);\n                break;\n            default:\n                break;\n        }\n        return [name, errorStr, returnValue]\n    }\n\n    handleOnChange = (event) => {\n        let name = event.target.name;\n        let value = event.target.value;\n        let [keyName, errorStr, keyValue] = this.movieValidation(name, value);\n        this.setKeyValue(keyName, errorStr, keyValue);\n    }\n\n    handleReset = () => {\n        this.getInitialState(false);\n        document.getElementById('movieCreateForm').reset();\n    }\n\n    isFormValid = () => {\n        this.props.items.forEach(item => {\n            if (this.state.errors[item].length !== 0){\n                return false;\n            }\n        });\n        return true;\n    }\n\n    handleShowConfirmation = () => {\n        this.setState({\n            ...this.state,\n            flags:{\n                ...this.state.flags,\n                isShowConfirmation: !this.state.flags.isShowConfirmation\n            }\n        })\n        if (this.state.flags.isCreated){\n            this.handleReset();\n        }\n    }\n\n    handleSubmit = () => {\n        if (this.isFormValid){\n            this.handleShowConfirmation();\n        } else {\n            alert('Form is not valid')\n        }\n    } \n\n    handleFormSubmit = () => {\n        //fetch functions\n        fetch('http://localhost:5000/movie/create',{\n            headers: {'Content-Type':'application/json'},\n            method: 'POST',\n            body: JSON.stringify(this.state.movies)\n        }).then(res => res.json()).then(res => this.setState({\n                ...this.state,\n                movies: res.data,\n                flags : {\n                    ...this.state.flags,\n                    isCreated: true\n                }\n            })\n        )\n    }\n\n    render(){\n\n        const MovieItems = this.props.items.map((item)=>{\n            return(\n                <Form.Group>\n                    <Form.Label>\n                        {item[0].toUpperCase() + item.substr(1,)}{' '}\n                    </Form.Label>\n                    <Form.Control\n                        type='text'\n                        size='lg'\n                        placeholder={`Enter the movie ${item}`}\n                        name={item}\n                        onChange={this.handleOnChange}\n                    />\n                    {this.state.errors[item] === '' ? null : \n                        <Badge variant='danger'>{this.state.errors[item]}</Badge>\n                    }\n                </Form.Group>\n            )\n        })\n\n        let MovieCreateConfirmation = (movie) => {\n            let modalTitle = 'Movie create confirmation !';\n            let movieCode = null;\n            let buttonList =\n                    <Row>\n                        <Col>\n                            <Button block variant=\"secondary\" onClick={this.handleShowConfirmation}>Cancel</Button>{' '}\n                        </Col>  \n                        <Col>\n                            <Button block variant='primary' onClick={this.handleFormSubmit}>Confirm</Button>{' '}\n                        </Col>    \n                    </Row>\n            if (this.state.flags.isCreated){\n                modalTitle = 'Movie is creadted sucessfully !!!'\n                movieCode = \n                    <Form.Group>\n                        <Row>\n                            <Col className='col-2'>\n                                <Form.Label>Code</Form.Label>\n                            </Col>\n                            <Col>\n                                <Form.Control value={this.state.movies._id}/>\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                buttonList = \n                    <Row>\n                        <Col>\n                            <Button block variant=\"success\" onClick={this.handleShowConfirmation}>Close</Button>{' '}\n                        </Col>  \n                    </Row> \n            }\n            return(\n                <Modal show={this.state.flags.isShowConfirmation} onHide={this.handleShowConfirmation}>\n                    <Modal.Header closeButton>\n                        <Modal.Title> {modalTitle} </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {movieCode}\n                        {this.props.items.map(item=>{\n                            return(\n                                <Form.Group>\n                                    <Row>\n                                        <Col className='col-2'>\n                                            <Form.Label>{item[0].toUpperCase() + item.substr(1,)}</Form.Label>\n                                        </Col>\n                                        <Col>\n                                            <Form.Control value={this.state.movies[item]}/>\n                                        </Col>\n                                    </Row>\n                                </Form.Group>   \n                            )\n                        })}\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Col className='col-2'/>\n                        <Col> {buttonList} </Col>\n                    </Modal.Footer>\n                </Modal>\n            )}\n\n        return(\n            <Form id='movieCreateForm'>\n                {MovieItems}\n                <Row>\n                    <Col>\n                        <Button block size='lg' \n                                variant='primary' \n                                onClick={this.handleSubmit} \n                                disabled={!this.state.flags.isShowSubmitButton}>\n                            Submit\n                        </Button>\n                    </Col>\n                    <Col>\n                        <Button block size='lg' variant='danger' onClick={this.handleReset}>Reset</Button>\n                    </Col>\n                </Row>\n                {MovieCreateConfirmation(this.state.movies)}\n            </Form>\n        )\n    }\n}\n\nexport default CreatePage;"]},"metadata":{},"sourceType":"module"}