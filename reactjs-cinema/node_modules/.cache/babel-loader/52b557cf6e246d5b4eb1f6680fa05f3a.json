{"ast":null,"code":"var _jsxFileName = \"/home/phuong/Documents/FE-Practice/reactjs-cinema/src/pages/ReadPageV3.js\";\nimport React from 'react';\nimport { Table, Button, Row, Col, Modal, Form } from 'react-bootstrap';\n\nclass ReadPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = movieItems => {\n      this.state = {\n        movieItems: movieItems,\n        movieList: [],\n        selectedMovie: {},\n        errors: {},\n        isShow: false,\n        isEdit: true\n      };\n      console.log(this.state);\n    };\n\n    this.setStatus = (key, value) => {\n      let preState = this.state;\n      key.forEach((eachKey, index) => {\n        preState[eachKey] = value[index];\n      });\n      this.setState(preState);\n    };\n\n    this.handleAction = (actionName, index) => {\n      let isEdit = actionName === 'edit';\n      let isShow = this.state.isShow;\n      let selectedMovie = this.state.movieList[index];\n      this.setStatus(['isEdit', 'isShow', 'selectedMovie'], [isEdit, !isShow, selectedMovie]);\n    };\n\n    this.handleShow = () => {\n      this.setStatus(['isShow'], [!this.state.isShow]);\n    };\n\n    this.setKeyValue = (key, errorValue, movieValue) => {\n      let preErrors = { ...this.state.errors\n      };\n      let preMovies = { ...this.state.selectedMovie\n      };\n      let movieName = this.state.selectedMovie.name;\n      preErrors[key] = errorValue;\n      preMovies[key] = movieValue;\n      let isShowSubmitButton = false;\n\n      if (key === 'name' && movieValue.length !== 0 || movieName.length !== 0) {\n        isShowSubmitButton = true;\n      }\n\n      this.setState({ ...this.state,\n        selectedMovie: preMovies,\n        errors: preErrors\n      });\n    };\n\n    this.movieNameValidation = movieName => {\n      let errorStr = 'Movie name must NOT be empty';\n      let name = movieName.trim();\n\n      if (name.length) {\n        errorStr = '';\n      } else {\n        name = '';\n      }\n\n      return [errorStr, name];\n    };\n\n    this.movieRatingValidation = movieRating => {\n      let errorStr = 'Movie rating must be a NUMBER';\n      let ratingNumber = parseFloat(movieRating);\n\n      if (!ratingNumber) {\n        ratingNumber = 0.0;\n      } else {\n        errorStr = '';\n      }\n\n      return [errorStr, ratingNumber];\n    };\n\n    this.movieTimeValidation = movieTime => {\n      const timePattern = /^\\d{1,2}:\\d{2}[,\\d{1,2}:\\d{2}]*?$/;\n      let errorStr = 'Movie time must be a string PATTERN hh:mm or hh:mm,hh:mm';\n      let timeArray = movieTime.trim();\n\n      if (timePattern.test(timeArray)) {\n        errorStr = '';\n        timeArray = timeArray.split(',');\n      } else {\n        timeArray = [];\n      }\n\n      return [errorStr, timeArray];\n    };\n\n    this.movieValidation = (name, value) => {\n      let [errorStr, returnValue] = '';\n\n      switch (name) {\n        case 'name':\n          [errorStr, returnValue] = this.movieNameValidation(value);\n          break;\n\n        case 'rating':\n          [errorStr, returnValue] = this.movieRatingValidation(value);\n          break;\n\n        case 'time':\n          [errorStr, returnValue] = this.movieTimeValidation(value);\n          break;\n\n        default:\n          break;\n      }\n\n      return [name, errorStr, returnValue];\n    };\n\n    this.handleOnChange = event => {\n      let name = event.target.name;\n      let value = event.target.value;\n      let [keyName, errorStr, keyValue] = this.movieValidation(name, value);\n      this.setKeyValue(keyName, errorStr, keyValue);\n    };\n\n    this.updadteMovies = code => {\n      let newMovies = this.state.movieList;\n      let selectedMovieIndex = null;\n      newMovies.forEach((item, index) => {\n        if (item._id === this.state.selectedMovie._id) {\n          selectedMovieIndex = index;\n        }\n      }); //console.log(selectedMovieIndex);\n\n      if (this.state.isEdit) {\n        newMovies[selectedMovieIndex] = this.state.selectedMovie;\n      } else {\n        newMovies.splice(selectedMovieIndex, 1);\n      } //console.log(newMovies);\n\n\n      if (code === 200) {\n        this.setState({\n          movieList: newMovies\n        });\n      }\n    };\n\n    this.handleConfirm = () => {\n      let movieId = this.state.selectedMovie._id;\n      const urlHeroku = `https://nodejs-cinema.herokuapp.com/api/${movieId}`; //const urlLocalHost = `http://localhost:5000/movie/${action}/${movie_id}`;\n\n      fetch(urlHeroku, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: this.state.isEdit ? 'POST' : 'DELETE',\n        body: JSON.stringify(this.state.selectedMovie)\n      }).then(res => res.json()).then(res => this.updadteMovies(res.code));\n      this.handleShow();\n    };\n\n    this.initialState(['name', 'rating', 'time']);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n\n  componentDidMount() {\n    const urlHeroku = 'https://nodejs-cinema.herokuapp.com/api/movies'; //const urlLocalHost = 'http://localhost:5000/movie/all';\n\n    fetch(urlHeroku).then(res => res.json()).then(res => this.setState({\n      movieList: res.data\n    }));\n  }\n\n  render() {\n    const tableHeader = this.props.headers.map(item => {\n      return /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }\n      }, item);\n    });\n\n    const ActionModal = () => {\n      return /*#__PURE__*/React.createElement(Modal, {\n        show: this.state.isShow,\n        onHide: this.handleShow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Header, {\n        closeButton: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        variant: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }\n      }, this.state.isEdit ? 'Edit' : 'Delete'), \" movie\")), /*#__PURE__*/React.createElement(Modal.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        className: \"col-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 41\n        }\n      }, \"Code\")), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        readOnly: true,\n        value: this.state.selectedMovie._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 41\n        }\n      })))), this.state.movieItems.map(item => {\n        return /*#__PURE__*/React.createElement(Form.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          className: \"col-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Form.Label, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 49\n          }\n        }, item[0].toUpperCase() + item.substr(1))), /*#__PURE__*/React.createElement(Col, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          type: \"text\",\n          value: this.state.selectedMovie[item],\n          readOnly: !this.state.isEdit,\n          name: item,\n          onChange: this.handleOnChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 49\n          }\n        }), this.state.errors[item] ? /*#__PURE__*/React.createElement(Form.Control, {\n          plaintext: true,\n          value: this.state.errors[item],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 53\n          }\n        }) : null)));\n      }))), /*#__PURE__*/React.createElement(Modal.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"col-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        variant: \"danger\",\n        onClick: this.handleConfirm,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 37\n        }\n      }, this.state.isEdit ? 'Update' : 'Delete'))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        variant: \"primary\",\n        onClick: this.handleShow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 33\n        }\n      }, \"Cancel\")))));\n    };\n\n    const tableBody = this.state.movieList.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }\n      }, index + 1), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }\n      }, item.name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }\n      }, item.rating), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        variant: \"primary\",\n        size: \"sm\",\n        onClick: () => this.handleAction('edit', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 33\n        }\n      }, \"Edit\")), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        variant: \"danger\",\n        size: \"sm\",\n        onClick: () => this.handleAction('remove', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 33\n        }\n      }, \"Remove\")))));\n    });\n    return /*#__PURE__*/React.createElement(Table, {\n      responsive: true,\n      hover: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 21\n      }\n    }, tableHeader)), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }\n    }, tableBody, ActionModal()));\n  }\n\n}\n\nexport default ReadPage;","map":{"version":3,"sources":["/home/phuong/Documents/FE-Practice/reactjs-cinema/src/pages/ReadPageV3.js"],"names":["React","Table","Button","Row","Col","Modal","Form","ReadPage","Component","constructor","props","initialState","movieItems","state","movieList","selectedMovie","errors","isShow","isEdit","console","log","setStatus","key","value","preState","forEach","eachKey","index","setState","handleAction","actionName","handleShow","setKeyValue","errorValue","movieValue","preErrors","preMovies","movieName","name","isShowSubmitButton","length","movieNameValidation","errorStr","trim","movieRatingValidation","movieRating","ratingNumber","parseFloat","movieTimeValidation","movieTime","timePattern","timeArray","test","split","movieValidation","returnValue","handleOnChange","event","target","keyName","keyValue","updadteMovies","code","newMovies","selectedMovieIndex","item","_id","splice","handleConfirm","movieId","urlHeroku","fetch","headers","method","body","JSON","stringify","then","res","json","bind","componentDidMount","data","render","tableHeader","map","ActionModal","toUpperCase","substr","tableBody","rating"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Table, Button, Row, Col, Modal, Form} from 'react-bootstrap';\n\nclass ReadPage extends React.Component{\n    constructor(props){\n        super(props);\n        this.initialState(['name', 'rating', 'time']);\n        this.handleShow = this.handleShow.bind(this);\n        this.handleOnChange = this.handleOnChange.bind(this);\n    }\n\n    initialState = (movieItems) => {\n        this.state = {\n            movieItems: movieItems,\n            movieList: [],\n            selectedMovie: {},\n            errors: {},\n            isShow: false,\n            isEdit: true\n        }\n        console.log(this.state);\n    }\n\n    componentDidMount(){\n        const urlHeroku = 'https://nodejs-cinema.herokuapp.com/api/movies';\n        //const urlLocalHost = 'http://localhost:5000/movie/all';\n        fetch(urlHeroku)\n            .then(res => res.json())\n            .then(res => this.setState({movieList: res.data}))\n    }\n\n    setStatus = (key, value) => {\n        let preState = this.state;\n        key.forEach((eachKey, index)=>{\n            preState[eachKey] = value[index]\n        })\n        this.setState(preState)\n    }\n\n    handleAction = (actionName, index) => {\n        let isEdit = actionName === 'edit';\n        let isShow = this.state.isShow;\n        let selectedMovie = this.state.movieList[index];\n        this.setStatus(['isEdit', 'isShow', 'selectedMovie'], [isEdit, !isShow, selectedMovie]);\n    }\n\n    handleShow = () => {\n        this.setStatus(['isShow'], [!this.state.isShow])\n    }\n\n    setKeyValue = (key, errorValue, movieValue) => {\n        let preErrors = {...this.state.errors};\n        let preMovies = {...this.state.selectedMovie};\n        let movieName = this.state.selectedMovie.name;\n        preErrors[key] = errorValue;\n        preMovies[key] = movieValue;\n        let isShowSubmitButton = false;\n        if ((key ==='name' && movieValue.length !== 0) || movieName.length !== 0) {\n            isShowSubmitButton = true\n        }\n        this.setState({\n            ...this.state,\n            selectedMovie: preMovies,\n            errors: preErrors\n        })\n    }\n\n    movieNameValidation = (movieName) => {\n        let errorStr = 'Movie name must NOT be empty';\n        let name = movieName.trim();\n        if (name.length) {\n            errorStr = '';\n        } else {\n            name = '';\n        }\n        return [errorStr, name]\n    }\n\n    movieRatingValidation = (movieRating) => {\n        let errorStr = 'Movie rating must be a NUMBER';\n        let ratingNumber = parseFloat(movieRating);\n        if (!ratingNumber){\n            ratingNumber = 0.0;\n        } else {\n            errorStr = ''\n        }\n        return [errorStr, ratingNumber]\n    }\n\n    movieTimeValidation = (movieTime) => {\n        const timePattern = /^\\d{1,2}:\\d{2}[,\\d{1,2}:\\d{2}]*?$/;\n        let errorStr = 'Movie time must be a string PATTERN hh:mm or hh:mm,hh:mm'\n        let timeArray = movieTime.trim()\n        if (timePattern.test(timeArray)){\n            errorStr = '';\n            timeArray = timeArray.split(',');\n        } else {\n            timeArray = [];\n        }\n        return [errorStr, timeArray]\n    }\n\n    movieValidation = (name, value) => {\n        let [errorStr, returnValue] = '';\n        switch (name) {\n            case 'name':\n                [errorStr, returnValue] = this.movieNameValidation(value);\n                break;\n            case 'rating':\n                [errorStr, returnValue] = this.movieRatingValidation(value);\n                break;\n            case 'time':\n                [errorStr, returnValue] = this.movieTimeValidation(value);\n                break;\n            default:\n                break;\n        }\n        return [name, errorStr, returnValue]\n    }\n\n    handleOnChange = (event) => {\n        let name = event.target.name;\n        let value = event.target.value;\n        let [keyName, errorStr, keyValue] = this.movieValidation(name, value);\n        this.setKeyValue(keyName, errorStr, keyValue);\n    }\n\n    updadteMovies = (code) => {\n        let newMovies = this.state.movieList;\n        let selectedMovieIndex = null;\n        newMovies.forEach((item, index)=>{\n            if (item._id === this.state.selectedMovie._id){\n                selectedMovieIndex = index;\n            }\n        })\n        //console.log(selectedMovieIndex);\n        if (this.state.isEdit){\n            newMovies[selectedMovieIndex] = this.state.selectedMovie;\n        } else {\n            newMovies.splice(selectedMovieIndex, 1)\n        }\n        //console.log(newMovies);\n        if (code === 200){\n            this.setState({movieList: newMovies});\n        }\n    }\n\n    handleConfirm = () => {\n        let movieId = this.state.selectedMovie._id;\n        const urlHeroku  = `https://nodejs-cinema.herokuapp.com/api/${movieId}`;\n        //const urlLocalHost = `http://localhost:5000/movie/${action}/${movie_id}`;\n        fetch(urlHeroku, {\n            headers: {'Content-Type':'application/json'},\n            method: this.state.isEdit ? 'POST' : 'DELETE',\n            body: JSON.stringify(this.state.selectedMovie)\n        })\n            .then(res => res.json())\n            .then(res => this.updadteMovies(res.code))\n        this.handleShow();\n    }\n\n    render(){\n        const tableHeader = this.props.headers.map((item)=>{\n            return(\n                <th>{item}</th>\n            )\n        });\n        \n        const ActionModal = () => {\n            return(\n                <Modal show={this.state.isShow} onHide={this.handleShow}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <b variant=\"danger\">{this.state.isEdit ? 'Edit' : 'Delete'}</b> movie\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form>\n                            <Form.Group>\n                                <Row>\n                                    <Col className='col-2'>\n                                        <Form.Label>Code</Form.Label>\n                                    </Col>\n                                    <Col>\n                                        <Form.Control type='text' readOnly value={this.state.selectedMovie._id}/>\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                            {this.state.movieItems.map((item)=>{\n                                return(\n                                    <Form.Group>\n                                        <Row>\n                                            <Col className='col-2'>\n                                                <Form.Label>{item[0].toUpperCase() + item.substr(1,)}</Form.Label>\n                                            </Col>\n                                            <Col>\n                                                <Form.Control \n                                                    type='text' \n                                                    value={this.state.selectedMovie[item]}\n                                                    readOnly={!this.state.isEdit}\n                                                    name={item}\n                                                    onChange={this.handleOnChange}\n                                                />\n                                                {this.state.errors[item] ?\n                                                    <Form.Control plaintext value={this.state.errors[item]}/>\n                                                    : null\n                                                }\n                                            </Col>\n                                        </Row>\n                                    </Form.Group>\n                                )\n                            })}\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Row className=\"col-12\">\n                            <Col>\n                                <Button block variant=\"danger\" onClick={this.handleConfirm}>\n                                    <b>{this.state.isEdit?'Update':'Delete'}</b>\n                                </Button>\n                            </Col>\n                            <Col>\n                                <Button block variant=\"primary\" onClick={this.handleShow}>Cancel</Button>\n                            </Col>\n                        </Row>\n                    </Modal.Footer>\n                </Modal>\n            )\n        }\n        \n        const tableBody = this.state.movieList.map((item, index)=>{\n            return(\n                <tr>\n                    <td>{index+1}</td>\n                    <td>{item.name}</td>\n                    <td>{item.rating}</td>\n                    <td>\n                        <Row>\n                            <Col>\n                                <Button block variant=\"primary\" size='sm' onClick={()=>this.handleAction('edit', index)}>Edit</Button>\n                            </Col>\n                            <Col>\n                                <Button block variant=\"danger\" size='sm' onClick={()=>this.handleAction('remove', index)}>Remove</Button>\n                            </Col>\n                        </Row>\n                    </td>\n                </tr>\n            )\n        });\n\n        return(\n            <Table responsive hover>\n                <thead>\n                    <tr>{tableHeader}</tr>\n                </thead>\n                <tbody>\n                    {tableBody}\n                    {ActionModal()}\n                </tbody>\n            </Table>\n        )\n    }\n}\n\nexport default ReadPage;"]},"metadata":{},"sourceType":"module"}