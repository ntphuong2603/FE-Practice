{"ast":null,"code":"var _jsxFileName = \"/home/phuong/Documents/FE-Practice/reactjs-cinema/src/pages/ReadPageV3.js\";\nimport React from 'react';\nimport { Table, Button, Row, Col, Modal, Form } from 'react-bootstrap';\n\nclass ReadPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = () => {\n      const itemName = ['name', 'rating', 'time'];\n      const statusList = {};\n      ['isEdit', 'isShow', 'selectedMovie', 'errors'].map(item => {\n        statusList[item] = '';\n        /*\n        if (item=='errors'){\n            itemName.map((eachItem)=>{\n                statusList[item][eachItem] = \"\";\n            })\n        }\n        */\n      });\n      this.state = {\n        itemName: itemName,\n        movies: [],\n        status: statusList\n      };\n    };\n\n    this.setStatus = (key, value) => {\n      let status = { ...this.state.status\n      }; //console.log(key, value);\n\n      key.forEach((eachKey, index) => {\n        status[eachKey] = value[index];\n      });\n      this.setState({ ...this.state,\n        status\n      });\n    };\n\n    this.handleAction = (actionName, index) => {\n      let isEdit = actionName === 'edit';\n      let isShow = this.state.status.isShow;\n      let selectedMovie = this.state.movies[index];\n      this.setStatus(['isEdit', 'isShow', 'selectedMovie'], [isEdit, !isShow, selectedMovie]);\n    };\n\n    this.handleShow = () => {\n      this.setStatus(['isShow'], [!this.state.status.isShow]);\n    };\n\n    this.setKeyValue = (key, errorValue, movieValue) => {\n      let preErrors = { ...this.state.status.errors\n      };\n      let preMovies = { ...this.state.status.selectedMovie\n      };\n      let movieName = this.state.status.selectedMovie.name;\n      preErrors[key] = errorValue;\n      preMovies[key] = movieValue;\n      let isShowSubmitButton = false;\n\n      if (key === 'name' && movieValue.length !== 0 || movieName.length !== 0) {\n        isShowSubmitButton = true;\n      }\n\n      this.setState({ ...this.state,\n        status: { ...this.state.status,\n          errors: preErrors,\n          selectedMovie: preMovies\n        }\n      });\n    };\n\n    this.movieNameValidation = movieName => {\n      let errorStr = 'Movie name must NOT be empty';\n      let name = movieName.trim();\n\n      if (name.length) {\n        errorStr = '';\n      } else {\n        name = '';\n      }\n\n      return [errorStr, name];\n    };\n\n    this.movieRatingValidation = movieRating => {\n      let errorStr = 'Movie rating must be a NUMBER';\n      let ratingNumber = parseFloat(movieRating);\n\n      if (!ratingNumber) {\n        ratingNumber = 0.0;\n      } else {\n        errorStr = '';\n      }\n\n      return [errorStr, ratingNumber];\n    };\n\n    this.movieTimeValidation = movieTime => {\n      const timePattern = /^\\d{1,2}:\\d{2}[,\\d{1,2}:\\d{2}]*?$/;\n      let errorStr = 'Movie time must be a string PATTERN hh:mm or hh:mm,hh:mm';\n      let timeArray = movieTime.trim();\n\n      if (timePattern.test(timeArray)) {\n        errorStr = '';\n        timeArray = timeArray.split(',');\n      } else {\n        timeArray = [];\n      }\n\n      return [errorStr, timeArray];\n    };\n\n    this.movieValidation = (name, value) => {\n      let [errorStr, returnValue] = '';\n\n      switch (name) {\n        case 'name':\n          [errorStr, returnValue] = this.movieNameValidation(value);\n          break;\n\n        case 'rating':\n          [errorStr, returnValue] = this.movieRatingValidation(value);\n          break;\n\n        case 'time':\n          [errorStr, returnValue] = this.movieTimeValidation(value);\n          break;\n\n        default:\n          break;\n      }\n\n      return [name, errorStr, returnValue];\n    };\n\n    this.handleOnChange = event => {\n      let name = event.target.name;\n      let value = event.target.value;\n      console.log(name, value);\n      let [keyName, errorStr, keyValue] = this.movieValidation(name, value);\n      this.setKeyValue(keyName, errorStr, keyValue);\n    };\n\n    this.updadteMovies = movie => {\n      let newMovies = this.state.movies;\n      newMovies.forEach((item, index) => {\n        if (item._id === this.state.status.selectedMovie._id) {\n          if (this.state.status.isEdit) {\n            newMovies[index] = movie;\n          } else {\n            newMovies.splice(index, 1);\n          }\n        }\n      }); //console.log(newMovies);\n\n      this.setState({\n        movies: newMovies\n      });\n    };\n\n    this.handleConfirm = () => {\n      let action = this.state.status.isEdit ? 'update' : 'delete';\n      let movie_id = this.state.status.selectedMovie._id;\n      let action_url = `http://localhost:5000/movie/${action}/${movie_id}`;\n      fetch(action_url, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: this.state.status.isEdit ? 'POST' : 'DELETE',\n        body: JSON.stringify(this.state.status.selectedMovie)\n      }).then(res => res.json()).then(res => this.updadteMovies(res.data));\n      this.handleShow();\n    };\n\n    this.initialState();\n    this.handleShow = this.handleShow.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n\n  componentDidMount() {\n    const urlHeroku = 'https://nodejs-cinema.herokuapp.com/api/movies';\n    const urlLocalHost = 'http://localhost:5000/movie/all';\n    fetch(urlHeroku).then(res => res.json()).then(res => this.setState({\n      movies: res.data\n    }));\n  }\n\n  render() {\n    const tableHeader = this.props.headers.map(item => {\n      return /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }, item);\n    });\n\n    const ActionModal = () => {\n      return /*#__PURE__*/React.createElement(Modal, {\n        show: this.state.status.isShow,\n        onHide: this.handleShow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Header, {\n        closeButton: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        variant: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 29\n        }\n      }, this.state.status.isEdit ? 'Edit' : 'Delete'), \" movie\")), /*#__PURE__*/React.createElement(Modal.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        className: \"col-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 41\n        }\n      }, \"Code\")), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        readOnly: true,\n        value: this.state.status.selectedMovie._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 41\n        }\n      })))), this.state.itemName.map(item => {\n        return /*#__PURE__*/React.createElement(Form.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          className: \"col-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Form.Label, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 49\n          }\n        }, item[0].toUpperCase() + item.substr(1))), /*#__PURE__*/React.createElement(Col, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          type: \"text\",\n          value: this.state.status.selectedMovie[item],\n          readOnly: !this.state.status.isEdit,\n          name: item,\n          onChange: this.handleOnChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 49\n          }\n        }), this.state.status.errors[item] ? /*#__PURE__*/React.createElement(Form.Control, {\n          plaintext: true,\n          value: this.state.status.errors[item],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 53\n          }\n        }) : null)));\n      }))), /*#__PURE__*/React.createElement(Modal.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"col-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        variant: \"danger\",\n        onClick: this.handleConfirm,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 37\n        }\n      }, this.state.status.isEdit ? 'Update' : 'Delete'))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        variant: \"primary\",\n        onClick: this.handleShow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 33\n        }\n      }, \"Cancel\")))));\n    };\n\n    const tableBody = this.state.movies.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }\n      }, index + 1), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }\n      }, item.name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }\n      }, item.rating), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        variant: \"primary\",\n        size: \"sm\",\n        onClick: () => this.handleAction('edit', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 33\n        }\n      }, \"Edit\")), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        variant: \"danger\",\n        size: \"sm\",\n        onClick: () => this.handleAction('remove', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 33\n        }\n      }, \"Remove\")))));\n    });\n    return /*#__PURE__*/React.createElement(Table, {\n      responsive: true,\n      hover: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }\n    }, tableHeader)), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }\n    }, tableBody, ActionModal()));\n  }\n\n}\n\nexport default ReadPage;","map":{"version":3,"sources":["/home/phuong/Documents/FE-Practice/reactjs-cinema/src/pages/ReadPageV3.js"],"names":["React","Table","Button","Row","Col","Modal","Form","ReadPage","Component","constructor","props","initialState","itemName","statusList","map","item","state","movies","status","setStatus","key","value","forEach","eachKey","index","setState","handleAction","actionName","isEdit","isShow","selectedMovie","handleShow","setKeyValue","errorValue","movieValue","preErrors","errors","preMovies","movieName","name","isShowSubmitButton","length","movieNameValidation","errorStr","trim","movieRatingValidation","movieRating","ratingNumber","parseFloat","movieTimeValidation","movieTime","timePattern","timeArray","test","split","movieValidation","returnValue","handleOnChange","event","target","console","log","keyName","keyValue","updadteMovies","movie","newMovies","_id","splice","handleConfirm","action","movie_id","action_url","fetch","headers","method","body","JSON","stringify","then","res","json","data","bind","componentDidMount","urlHeroku","urlLocalHost","render","tableHeader","ActionModal","toUpperCase","substr","tableBody","rating"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Table, Button, Row, Col, Modal, Form} from 'react-bootstrap';\n\nclass ReadPage extends React.Component{\n    constructor(props){\n        super(props);\n        this.initialState();\n        this.handleShow = this.handleShow.bind(this);\n        this.handleOnChange = this.handleOnChange.bind(this);\n    }\n\n    initialState = () => {\n        const itemName = ['name', 'rating', 'time'];\n        const statusList = {};\n        ['isEdit', 'isShow', 'selectedMovie', 'errors'].map(item=>{\n            statusList[item] = ''\n            /*\n            if (item=='errors'){\n                itemName.map((eachItem)=>{\n                    statusList[item][eachItem] = \"\";\n                })\n            }\n            */\n        })\n        this.state = {\n            itemName : itemName,\n            movies: [],\n            status: statusList,\n        };\n    }\n\n    componentDidMount(){\n        const urlHeroku = 'https://nodejs-cinema.herokuapp.com/api/movies';\n        const urlLocalHost = 'http://localhost:5000/movie/all';\n        fetch(urlHeroku)\n            .then(res => res.json())\n            .then(res => this.setState({movies: res.data}))\n    }\n\n    setStatus = (key, value) => {\n        let status = {...this.state.status};\n        //console.log(key, value);\n        key.forEach((eachKey, index)=>{\n            status[eachKey] = value[index];\n        })\n        this.setState({\n            ...this.state,\n            status\n        })\n    }\n\n    handleAction = (actionName, index) => {\n        let isEdit = actionName === 'edit';\n        let isShow = this.state.status.isShow;\n        let selectedMovie = this.state.movies[index];\n        this.setStatus(['isEdit', 'isShow', 'selectedMovie'], [isEdit, !isShow, selectedMovie]);\n    }\n\n    handleShow = () => {\n        this.setStatus(['isShow'], [!this.state.status.isShow])\n    }\n\n    setKeyValue = (key, errorValue, movieValue) => {\n        let preErrors = {...this.state.status.errors};\n        let preMovies = {...this.state.status.selectedMovie};\n        let movieName = this.state.status.selectedMovie.name;\n        preErrors[key] = errorValue;\n        preMovies[key] = movieValue;\n        let isShowSubmitButton = false;\n        if ((key ==='name' && movieValue.length !== 0) || movieName.length !== 0) {\n            isShowSubmitButton = true\n        }\n        this.setState({\n            ...this.state,\n            status: {\n                ...this.state.status,\n                errors: preErrors,\n                selectedMovie: preMovies\n            }\n        })\n    }\n\n    movieNameValidation = (movieName) => {\n        let errorStr = 'Movie name must NOT be empty';\n        let name = movieName.trim();\n        if (name.length) {\n            errorStr = '';\n        } else {\n            name = '';\n        }\n        return [errorStr, name]\n    }\n\n    movieRatingValidation = (movieRating) => {\n        let errorStr = 'Movie rating must be a NUMBER';\n        let ratingNumber = parseFloat(movieRating);\n        if (!ratingNumber){\n            ratingNumber = 0.0;\n        } else {\n            errorStr = ''\n        }\n        return [errorStr, ratingNumber]\n    }\n\n    movieTimeValidation = (movieTime) => {\n        const timePattern = /^\\d{1,2}:\\d{2}[,\\d{1,2}:\\d{2}]*?$/;\n        let errorStr = 'Movie time must be a string PATTERN hh:mm or hh:mm,hh:mm'\n        let timeArray = movieTime.trim()\n        if (timePattern.test(timeArray)){\n            errorStr = '';\n            timeArray = timeArray.split(',');\n        } else {\n            timeArray = [];\n        }\n        return [errorStr, timeArray]\n    }\n\n    movieValidation = (name, value) => {\n        let [errorStr, returnValue] = '';\n        switch (name) {\n            case 'name':\n                [errorStr, returnValue] = this.movieNameValidation(value);\n                break;\n            case 'rating':\n                [errorStr, returnValue] = this.movieRatingValidation(value);\n                break;\n            case 'time':\n                [errorStr, returnValue] = this.movieTimeValidation(value);\n                break;\n            default:\n                break;\n        }\n        return [name, errorStr, returnValue]\n    }\n\n    handleOnChange = (event) => {\n        let name = event.target.name;\n        let value = event.target.value;\n        console.log(name, value);\n        let [keyName, errorStr, keyValue] = this.movieValidation(name, value);\n        this.setKeyValue(keyName, errorStr, keyValue);\n    }\n\n    updadteMovies = (movie) => {\n        let newMovies = this.state.movies;\n        newMovies.forEach((item, index)=>{\n            if (item._id === this.state.status.selectedMovie._id){\n                if (this.state.status.isEdit){\n                    newMovies[index] = movie\n                } else {\n                    newMovies.splice(index, 1)\n                }\n            }\n        })\n        //console.log(newMovies);\n        this.setState({movies: newMovies});\n    }\n\n    handleConfirm = () => {\n        let action = this.state.status.isEdit ? 'update' : 'delete';\n        let movie_id = this.state.status.selectedMovie._id;\n        let action_url = `http://localhost:5000/movie/${action}/${movie_id}`;\n        fetch(action_url, {\n            headers: {'Content-Type':'application/json'},\n            method: this.state.status.isEdit ? 'POST' : 'DELETE',\n            body: JSON.stringify(this.state.status.selectedMovie)\n        })\n            .then(res => res.json())\n            .then(res => this.updadteMovies(res.data))\n        this.handleShow();\n    }\n\n    render(){\n        const tableHeader = this.props.headers.map((item)=>{\n            return(\n                <th>{item}</th>\n            )\n        });\n        \n        const ActionModal = () => {\n            return(\n                <Modal show={this.state.status.isShow} onHide={this.handleShow}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <b variant=\"danger\">{this.state.status.isEdit ? 'Edit' : 'Delete'}</b> movie\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form>\n                            <Form.Group>\n                                <Row>\n                                    <Col className='col-2'>\n                                        <Form.Label>Code</Form.Label>\n                                    </Col>\n                                    <Col>\n                                        <Form.Control type='text' readOnly value={this.state.status.selectedMovie._id}/>\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                            {this.state.itemName.map((item)=>{\n                                return(\n                                    <Form.Group>\n                                        <Row>\n                                            <Col className='col-2'>\n                                                <Form.Label>{item[0].toUpperCase() + item.substr(1,)}</Form.Label>\n                                            </Col>\n                                            <Col>\n                                                <Form.Control \n                                                    type='text' \n                                                    value={this.state.status.selectedMovie[item]}\n                                                    readOnly={!this.state.status.isEdit}\n                                                    name = {item}\n                                                    onChange={this.handleOnChange}\n                                                />\n                                                {this.state.status.errors[item] ?\n                                                    <Form.Control plaintext value={this.state.status.errors[item]}/>\n                                                    : null\n                                                }\n                                            </Col>\n                                        </Row>\n                                    </Form.Group>\n                                )\n                            })}\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Row className=\"col-12\">\n                            <Col>\n                                <Button block variant=\"danger\" onClick={this.handleConfirm}>\n                                    <b>{this.state.status.isEdit?'Update':'Delete'}</b>\n                                </Button>\n                            </Col>\n                            <Col>\n                                <Button block variant=\"primary\" onClick={this.handleShow}>Cancel</Button>\n                            </Col>\n                        </Row>\n                    </Modal.Footer>\n                </Modal>\n            )\n        }\n        \n        const tableBody = this.state.movies.map((item, index)=>{\n            return(\n                <tr>\n                    <td>{index+1}</td>\n                    <td>{item.name}</td>\n                    <td>{item.rating}</td>\n                    <td>\n                        <Row>\n                            <Col>\n                                <Button block variant=\"primary\" size='sm' onClick={()=>this.handleAction('edit', index)}>Edit</Button>\n                            </Col>\n                            <Col>\n                                <Button block variant=\"danger\" size='sm' onClick={()=>this.handleAction('remove', index)}>Remove</Button>\n                            </Col>\n                        </Row>\n                    </td>\n                </tr>\n            )\n        });\n\n        return(\n            <Table responsive hover>\n                <thead>\n                    <tr>{tableHeader}</tr>\n                </thead>\n                <tbody>\n                    {tableBody}\n                    {ActionModal()}\n                </tbody>\n            </Table>\n        )\n    }\n}\n\nexport default ReadPage;"]},"metadata":{},"sourceType":"module"}